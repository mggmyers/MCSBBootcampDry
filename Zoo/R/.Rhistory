install.packages("dplyr")
install.packages("tidyr")
install.packages("tidyr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyr")
install.packages("ggplot2")
install.packages("pheatmap")
library(dplyr)
#knitr::opts_chunk$set(echo = TRUE)
#extract metadata (information about each cell, e.g. cluster assignment)
cell_metadata <- read.table("C:/bootcamp_dry/MCSBBootcampDry/Zoo/R/cell_metadata.txt")
#extract the normalized data matrix
expression_matrix <- readRDS("C:/bootcamp_dry/MCSBBootcampDry/Zoo/R/expression_matrix.rds")
```{r read data}
```{r data discovery}
expression_matrix[1:5,1:5]
#check metadata column content
head(cell_metadata)
#first item is the dataframe (a type of R object containing a mix of numbers, characters and factors) that has the data you want to plot
#next, you give a mapping, where x=column name of data you want to plot on the x-axis, etc with fill generating a different color for each factor you plot
#finally, you tell ggplot the type of plot you want to render (for example, geom_point() would make a dot plot)
ggplot(cell_metadata, mapping=aes(x=orig.ident, y=nGene, fill=orig.ident)) + geom_violin()
library(pheatmap)
library(ggplot2)
#first item is the dataframe (a type of R object containing a mix of numbers, characters and factors) that has the data you want to plot
#next, you give a mapping, where x=column name of data you want to plot on the x-axis, etc with fill generating a different color for each factor you plot
#finally, you tell ggplot the type of plot you want to render (for example, geom_point() would make a dot plot)
ggplot(cell_metadata, mapping=aes(x=orig.ident, y=nGene, fill=orig.ident)) + geom_violin()
ggplot(cell_metadata, mapping=aes(x=orig.ident, y=nGene, fill=nGene)) + geom_violin()
#first item is the dataframe (a type of R object containing a mix of numbers, characters and factors) that has the data you want to plot
#next, you give a mapping, where x=column name of data you want to plot on the x-axis, etc with fill generating a different color for each factor you plot
#finally, you tell ggplot the type of plot you want to render (for example, geom_point() would make a dot plot)
ggplot(cell_metadata, mapping=aes(x=orig.ident, y=nGene, fill=orig.ident)) + geom_violin()
size(expression_matrix)
size.expression_matrix
#this technically sums a true/false matrix where true = 1 and false = 0
n_cells_expressed <- rowSums(expression_matrix > 0)
n_cells_expressed[1:5,1:5]
n_cells_expressed[1:5]
#which selects values from the first vector that match values in the second vector
most_expressed <- n_cells_expressed[which(n_cells_expressed %in% max(n_cells_expressed))]
most_expressed
